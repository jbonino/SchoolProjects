Object subclass: #MiniInterpreter	instanceVariableNames: 'environment'	classVariableNames: ''	poolDictionaries: ''	category: 'Mini-Interpreter'!!MiniInterpreter methodsFor: 'support' stamp: 'jws 11/12/2016 02:15'!declareFunctionResultFor: aFunctionNode	| var |	var := MiniVariable ofType: aFunctionNode type asString.	self environment 		addVariable: aFunctionNode name asString		value: var.! !!MiniInterpreter methodsFor: 'support' stamp: 'jws 11/12/2016 02:14'!declareParameters: parametersNode arguments: argumentsNode	| params args |	params := parametersNode parameters		collect: [:each | each name asString].	args := argumentsNode arguments		collect: [:each | each accept: self].	1 to: params size		do:			[:index |			| var |			var := MiniVariable ofType: (parametersNode parameters at: index) type asString.			self environment 				addVariable: (params at: index)				value: (args at: index)]! !!MiniInterpreter methodsFor: 'visiting' stamp: 'jws 11/11/2016 10:26'!visitMiniAssignmentNode: anAssignment	| var value |	var := self environment variableNamed: anAssignment lhs asString.	value := anAssignment rhs accept: self.	var value: value! !!MiniInterpreter methodsFor: 'visiting' stamp: 'jws 11/12/2016 02:18'!visitMiniEqualNode: anEqualNode	^(anEqualNode arg1 accept: self) = (anEqualNode arg2 accept: self)		ifTrue: [1]		ifFalse: [0]! !!MiniInterpreter methodsFor: 'visiting' stamp: 'jws 11/12/2016 02:23'!visitMiniFunctionCallNode: aFunctionCall	| funcName func returnValue |	funcName := aFunctionCall name asString.	func := self environment procedureNamed: funcName.	self environment activateScope.	self declareParameters: func parameters arguments: aFunctionCall arguments.	self declareFunctionResultFor: func.	func statements accept: self.	returnValue := (self environment variableNamed: funcName) value.	self environment deactivateScope.	^returnValue! !!MiniInterpreter methodsFor: 'visiting' stamp: 'jws 11/10/2016 10:03'!visitMiniFunctionNode: aFunctionNode	self environment		addProcedure: aFunctionNode name asString		value: aFunctionNode! !!MiniInterpreter methodsFor: 'visiting' stamp: 'jws 11/12/2016 02:17'!visitMiniIfElseNode: anIfElseNode	(anIfElseNode relation accept: self) ~= 0		ifTrue: [anIfElseNode statements accept: self]		ifFalse: [anIfElseNode elseStatements accept: self]! !!MiniInterpreter methodsFor: 'visiting' stamp: 'jws 11/12/2016 02:21'!visitMiniMulOpNode: aMulNode	^(aMulNode arg1 accept: self) * (aMulNode arg2 accept: self)! !!MiniInterpreter methodsFor: 'visiting' stamp: 'jws 11/12/2016 02:21'!visitMiniNameNode: aNameNode	^(self environment variableNamed: aNameNode asString) value! !!MiniInterpreter methodsFor: 'visiting' stamp: 'jws 11/12/2016 02:13'!visitMiniNumberNode: aNumberNode	^aNumberNode asInteger! !!MiniInterpreter methodsFor: 'visiting' stamp: 'jws 11/10/2016 09:58'!visitMiniProcedureSectionNode: aProcedureSection	aProcedureSection procedures		do:			[:each |			each accept: self]! !!MiniInterpreter methodsFor: 'visiting' stamp: 'jws 11/9/2016 10:49'!visitMiniProgramNode: aProgramNode	aProgramNode variables accept: self.	aProgramNode procedures accept: self.	aProgramNode main accept: self.! !!MiniInterpreter methodsFor: 'visiting' stamp: 'jws 11/10/2016 10:05'!visitMiniStatementsNode: someStatements	someStatements statements		do:			[:each |			each accept: self]! !!MiniInterpreter methodsFor: 'visiting' stamp: 'jws 11/12/2016 02:30'!visitMiniStringNode: aStringNode	^aStringNode asString! !!MiniInterpreter methodsFor: 'visiting' stamp: 'jws 11/12/2016 02:21'!visitMiniSubOpNode: aSubNode	^(aSubNode arg1 accept: self) - (aSubNode arg2 accept: self)! !!MiniInterpreter methodsFor: 'visiting' stamp: 'jws 11/14/2016 10:16'!visitMiniVariableDeclarationNode: aVariableDeclaration	| newVar |	newVar := MiniVariable ofType: aVariableDeclaration typeName.	[self environment		addVariable: aVariableDeclaration name asString		value: newVar]			on: MiniError			do: [:ex | self logError: ex]! !!MiniInterpreter methodsFor: 'visiting' stamp: 'jws 11/10/2016 09:41'!visitMiniVariableSectionNode: aVariableSection	aVariableSection variables		do:			[:each |			each accept: self]! !!MiniInterpreter methodsFor: 'visiting' stamp: 'jws 11/12/2016 02:29'!visitMiniWriteIntegerNode: aWriteIntegerNode	Transcript show: (aWriteIntegerNode expr accept: self)! !!MiniInterpreter methodsFor: 'visiting' stamp: 'jws 11/12/2016 02:32'!visitMiniWriteLnNode: aWriteLineNode	Transcript cr! !!MiniInterpreter methodsFor: 'visiting' stamp: 'jws 11/12/2016 02:29'!visitMiniWriteStringNode: aStringNode	Transcript show: (aStringNode expr accept: self)! !!MiniInterpreter methodsFor: 'initialize-release' stamp: 'jws 11/9/2016 10:40'!initialize	super initialize.	environment := MiniEnvironment new.! !!MiniInterpreter methodsFor: 'accessing' stamp: 'jws 11/10/2016 09:57'!environment	^ environment! !!MiniInterpreter methodsFor: 'accessing' stamp: 'jws 11/10/2016 09:57'!environment: anObject	environment := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MiniInterpreter class	instanceVariableNames: ''!!MiniInterpreter class methodsFor: 'interpreting' stamp: 'jws 11/9/2016 10:43'!interpret: aProgramString	| ast |	ast := MiniParser parse: aProgramString.	ast accept: self new! !Object subclass: #MiniPrettyPrinter	instanceVariableNames: 'prettyStream tabCount'	classVariableNames: ''	poolDictionaries: ''	category: 'Mini-Interpreter'!!MiniPrettyPrinter methodsFor: 'formatting' stamp: 'jws 11/16/2016 10:17'!indent	self prettyStream tab: self tabCount! !!MiniPrettyPrinter methodsFor: 'formatting' stamp: 'jws 11/16/2016 10:14'!tabIn	self tabCount: self tabCount + 1! !!MiniPrettyPrinter methodsFor: 'formatting' stamp: 'jws 11/16/2016 10:15'!tabOut	self tabCount: self tabCount - 1! !!MiniPrettyPrinter methodsFor: 'visiting' stamp: 'jws 11/17/2016 10:17'!visitMiniArgumentsNode: anArgumentList	self prettyStream nextPut: $(.	anArgumentList arguments		do:			[:each |			each accept: self]		separatedBy:			[self prettyStream nextPutAll: ', '].	self prettyStream nextPut: $)! !!MiniPrettyPrinter methodsFor: 'visiting' stamp: 'jws 11/16/2016 12:02'!visitMiniAssignmentNode: anAssignmentNode	anAssignmentNode lhs accept: self.	self prettyStream nextPutAll: ' := '.	anAssignmentNode rhs accept: self.! !!MiniPrettyPrinter methodsFor: 'visiting' stamp: 'jws 11/16/2016 10:46'!visitMiniEqualNode: anEqualNode	anEqualNode arg1 accept: self.	self prettyStream nextPutAll: ' = '.	anEqualNode arg2 accept: self.! !!MiniPrettyPrinter methodsFor: 'visiting' stamp: 'jws 11/17/2016 10:11'!visitMiniFunctionCallNode: aFunctionCall	aFunctionCall name accept: self.	aFunctionCall arguments accept: self.! !!MiniPrettyPrinter methodsFor: 'visiting' stamp: 'jws 11/17/2016 10:06'!visitMiniFunctionNode: aFunction	self indent.	self prettyStream		nextPutAll: 'function';		space;		nextPutAll: aFunction name asString.	aFunction parameters accept: self.	self prettyStream		nextPutAll: ' : ';		nextPutAll: aFunction type asString;		cr.	self tabIn.	aFunction statements accept: self.	self tabOut; indent.	self prettyStream nextPutAll: 'endfunction'; cr! !!MiniPrettyPrinter methodsFor: 'visiting' stamp: 'jws 11/16/2016 11:59'!visitMiniIfElseNode: anIfElseNode	self prettyStream nextPutAll: 'if '.	anIfElseNode relation accept: self.	self prettyStream nextPutAll: ' then'; cr.	self tabIn.	anIfElseNode statements accept: self.	self tabOut; indent.	self prettyStream nextPutAll: 'else'; cr.	self tabIn.	anIfElseNode elseStatements accept: self.	self tabOut; indent.	self prettyStream nextPutAll: 'endif'.! !!MiniPrettyPrinter methodsFor: 'visiting' stamp: 'jws 11/16/2016 12:02'!visitMiniMulOpNode: aMulOp	aMulOp arg1 accept: self.	self prettyStream nextPutAll: ' * '.	aMulOp arg2 accept: self.! !!MiniPrettyPrinter methodsFor: 'visiting' stamp: 'jws 11/16/2016 10:48'!visitMiniNameNode: aName	self prettyStream nextPutAll: aName asString! !!MiniPrettyPrinter methodsFor: 'visiting' stamp: 'jws 11/16/2016 10:48'!visitMiniNumberNode: aNumber	self prettyStream nextPutAll: aNumber asString! !!MiniPrettyPrinter methodsFor: 'visiting' stamp: 'jws 11/16/2016 10:34'!visitMiniParametersNode: aParametersNode	self prettyStream nextPut: $(.	aParametersNode parameters		do:			[:each |			self prettyStream space.			each accept: self].	self prettyStream nextPutAll: ' )'! !!MiniPrettyPrinter methodsFor: 'visiting' stamp: 'jws 11/16/2016 10:20'!visitMiniProcedureSectionNode: aProcedureSection	self prettyStream nextPutAll: 'procedures'; cr.	self tabIn.	aProcedureSection procedures		do:			[:each | each accept: self].	self tabOut.! !!MiniPrettyPrinter methodsFor: 'visiting' stamp: 'jws 11/17/2016 10:25'!visitMiniProgramNode: aProgram	self prettyStream		nextPutAll: 'program';		space.	aProgram name accept: self.	self prettyStream cr.	aProgram variables accept: self.	aProgram procedures accept: self.	self prettyStream nextPutAll: 'main'; cr.	self tabIn.	aProgram main accept: self.	self tabOut.	self prettyStream nextPutAll: 'endProgram'! !!MiniPrettyPrinter methodsFor: 'visiting' stamp: 'jws 11/16/2016 10:45'!visitMiniStatementsNode: aStatementsNode	aStatementsNode statements		do:			[:each | 			self indent.			each accept: self.			self prettyStream cr]! !!MiniPrettyPrinter methodsFor: 'visiting' stamp: 'jws 11/17/2016 10:24'!visitMiniStringNode: aStringNode	self prettyStream nextPutAll: aStringNode token value! !!MiniPrettyPrinter methodsFor: 'visiting' stamp: 'jws 11/17/2016 10:18'!visitMiniSubOpNode: aSubOp	aSubOp arg1 accept: self.	self prettyStream nextPutAll: ' - '.	aSubOp arg2 accept: self.! !!MiniPrettyPrinter methodsFor: 'visiting' stamp: 'jws 11/14/2016 14:41'!visitMiniVariableDeclarationNode: aVariableDeclaration	aVariableDeclaration name accept: self.	self prettyStream nextPutAll: ' : '.	aVariableDeclaration type accept: self.! !!MiniPrettyPrinter methodsFor: 'visiting' stamp: 'jws 11/16/2016 10:17'!visitMiniVariableSectionNode: aVariableSection	self prettyStream nextPutAll: 'variables'; cr.	self tabIn.	aVariableSection variables		do:			[:each | 			self indent.			each accept: self.			self prettyStream cr].	self tabOut! !!MiniPrettyPrinter methodsFor: 'visiting' stamp: 'jws 11/17/2016 10:23'!visitMiniWriteIntegerNode: aWriteInteger	self prettyStream nextPutAll: 'writeInteger('.	aWriteInteger expr accept: self.	self prettyStream nextPutAll: ')'! !!MiniPrettyPrinter methodsFor: 'visiting' stamp: 'jws 11/17/2016 10:23'!visitMiniWriteLnNode: aWriteLine	self prettyStream nextPutAll: 'writeLine()'! !!MiniPrettyPrinter methodsFor: 'visiting' stamp: 'jws 11/17/2016 10:22'!visitMiniWriteStringNode: aWriteString	self prettyStream nextPutAll: 'writeString('.	aWriteString expr accept: self.	self prettyStream nextPutAll: ')'! !!MiniPrettyPrinter methodsFor: 'initialize-release' stamp: 'jws 11/16/2016 10:13'!initialize	super initialize.	prettyStream := WriteStream on: (String new: 1024).	tabCount := 0.! !!MiniPrettyPrinter methodsFor: 'accessing' stamp: 'jws 11/14/2016 10:30'!prettyStream	^ prettyStream! !!MiniPrettyPrinter methodsFor: 'accessing' stamp: 'jws 11/14/2016 10:30'!prettyStream: anObject	prettyStream := anObject! !!MiniPrettyPrinter methodsFor: 'accessing' stamp: 'jws 11/16/2016 10:13'!tabCount	^tabCount! !!MiniPrettyPrinter methodsFor: 'accessing' stamp: 'jws 11/16/2016 10:14'!tabCount: anInteger	tabCount := anInteger! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MiniPrettyPrinter class	instanceVariableNames: ''!!MiniPrettyPrinter class methodsFor: 'pretty printing' stamp: 'jws 11/14/2016 10:32'!prettyPrint: aProgramString		| prettyPrinter |	prettyPrinter := self new.	(MiniParser parse: aProgramString) accept: prettyPrinter.	^prettyPrinter prettyStream contents! !Object subclass: #MiniVariable	instanceVariableNames: 'value'	classVariableNames: ''	poolDictionaries: ''	category: 'Mini-Interpreter'!!MiniVariable methodsFor: 'accessing' stamp: 'jws 11/10/2016 09:48'!value	^ value! !!MiniVariable methodsFor: 'accessing' stamp: 'jws 11/10/2016 09:48'!value: anObject	value := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MiniVariable class	instanceVariableNames: ''!!MiniVariable class methodsFor: 'as yet unclassified' stamp: 'jws 11/10/2016 09:52'!ofType: aType	aType = 'string'		ifTrue: [^MiniStringVariable new].	aType = 'integer'		ifTrue: [^MiniIntegerVariable new].	self error: 'unknown type'! !MiniVariable subclass: #MiniIntegerVariable	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Mini-Interpreter'!!MiniIntegerVariable methodsFor: 'accessing' stamp: 'jws 11/10/2016 09:51'!value: anInteger	(anInteger isInteger) ifFalse: [MiniError signal: 'type violation'].	super value: anInteger! !MiniVariable subclass: #MiniStringVariable	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Mini-Interpreter'!!MiniStringVariable methodsFor: 'as yet unclassified' stamp: 'jws 11/10/2016 09:50'!value: aString	(aString isKindOf: String) ifFalse: [MiniError signal: 'type violation'].	super value: aString! !