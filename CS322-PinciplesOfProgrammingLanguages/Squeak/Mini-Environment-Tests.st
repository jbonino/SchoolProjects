TestCase subclass: #MiniEnvironmentTestCase	instanceVariableNames: 'anEnv'	classVariableNames: ''	poolDictionaries: ''	category: 'Mini-Environment-Tests'!!MiniEnvironmentTestCase commentStamp: 'JohnSarkela 11/2/2011 16:16' prior: 0!class MiniExecutionEnvironmentinstance variables	globalScope	procedureScope	currentScopeinstance methods	accessing		currentScope		currentScope: aScope		globalScope		globalScope: aGlobalScope		procedureScope		procedureScope: aScope	scope management		activateScope		addProcedure: aName parseTree: aProcedureNode		addVariable: aName value: aValue		deactivateScope		procedureNamed: aName		variableNamed: aName		variableNamed: aName put: aValue!!MiniEnvironmentTestCase methodsFor: 'running' stamp: 'JohnSarkela 11/2/2011 17:00'!setUp	anEnv := MiniEnvironment new.! !!MiniEnvironmentTestCase methodsFor: 'running' stamp: 'JohnSarkela 11/2/2011 17:00'!tearDown	anEnv := nil! !!MiniEnvironmentTestCase methodsFor: 'running' stamp: 'jws 11/3/2016 07:46'!testProcedureEnvironment	self should: [anEnv procedureNamed: 'foo'] raise: MiniUndeclaredError.	anEnv addProcedure: 'foo' value: 9.	self assert: ((anEnv procedureNamed: 'foo') = 9).	anEnv addVariable: 'foo' value: 7.	self assert: ((anEnv procedureNamed: 'foo') = 9).	self should: [anEnv addProcedure: 'foo' value: 7] raise: MiniMultipleDeclarationError.! !!MiniEnvironmentTestCase methodsFor: 'running' stamp: 'JohnSarkela 11/2/2011 22:51'!testScopeActivation	anEnv addVariable: 'foo' value: 7.	anEnv activateScope.	anEnv addVariable: 'foo' value: 9.	self assert:( (anEnv variableNamed: 'foo') = 9).	anEnv activateScope.	anEnv addVariable: 'baz' value: 13.	self assert: ((anEnv variableNamed: 'foo') = 9).	self assert: ((anEnv variableNamed: 'baz') = 13).	anEnv deactivateScope.	self should: [anEnv variableNamed: 'baz'] raise: MiniUndeclaredError.	anEnv deactivateScope.	self assert: ((anEnv variableNamed: 'foo') = 7)! !!MiniEnvironmentTestCase methodsFor: 'running' stamp: 'JohnSarkela 11/2/2011 17:00'!testVariableEnvironment	self should: [anEnv variableNamed: 'foo'] raise: MiniUndeclaredError.	anEnv addVariable: 'foo' value: 9.	self assert: ((anEnv variableNamed: 'foo') = 9).	self should: [anEnv addVariable: 'foo' value: 7] raise: MiniMultipleDeclarationError.	anEnv variableNamed: 'foo' put: 'baz'.	self assert: ((anEnv variableNamed: 'foo') = 'baz').! !TestCase subclass: #MiniScopeTestCase	instanceVariableNames: 'scope'	classVariableNames: ''	poolDictionaries: ''	category: 'Mini-Environment-Tests'!!MiniScopeTestCase commentStamp: 'JohnSarkela 11/2/2011 16:15' prior: 0!class MiniScopeinstance variables	outerScope	innerScope	class methods	instance creation		globalScope		newScopeIn: aScopeinstance methods	accessing		bind: aName to: aValue		bindingFor: aName		innerScope		innerScope: aScope		outerScope		outerScope: aScope		rebind: aName to: aValue	testing		hasVariableBindingFor: aNameclass MiniVoidScopeclass instance variables	defaultclass methods	instance creation		default		newinstance methods	accessing		bind: aName to: aValue		bindingFor: aName	testing		hasVariableBindingFor: aName!!MiniScopeTestCase methodsFor: 'initialize-release' stamp: 'JohnSarkela 10/30/2013 15:18'!setUp	super setUp.	scope := MiniScope globalScope.! !!MiniScopeTestCase methodsFor: 'initialize-release' stamp: 'JohnSarkela 10/30/2013 15:16'!tearDown	scope := nil.	^super tearDown ! !!MiniScopeTestCase methodsFor: 'running' stamp: 'jws 11/3/2016 07:53'!testBinding	| aScope |	aScope := MiniScope globalScope.	self deny: (aScope hasBindingFor: 'foo').	aScope bind: 'foo' to: nil.	self assert: (aScope hasBindingFor: 'foo').	self assert: ((aScope bindingFor: 'foo') = nil).	self should: [aScope bind: 'foo' to: 'fubar'] raise: MiniMultipleDeclarationError.! !!MiniScopeTestCase methodsFor: 'running' stamp: 'JohnSarkela 11/1/2013 13:57'!testEmptyScope	self should: [scope bindingFor: 'xlerb'] raise: MiniUndeclaredError.	self deny: (scope hasBindingFor: 'xlerb').! !!MiniScopeTestCase methodsFor: 'running' stamp: 'jws 11/3/2016 07:55'!testGlobalScope	| aScope |	aScope := MiniScope globalScope.	self assert: (aScope outerScope = MiniVoidScope default).	self assert: (aScope bindings isEmpty)! !!MiniScopeTestCase methodsFor: 'running' stamp: 'JohnSarkela 11/2/2011 22:49'!testNestedScope	| globalScope scopeA scopeB |	globalScope := MiniScope globalScope.	globalScope bind: 'foo' to: 7.	globalScope bind: 'baz' to: 9.	globalScope bind: 'bozo' to: 'clown'.	scopeA := MiniScope newScopeIn: globalScope.	scopeB := MiniScope newScopeIn: scopeA.	scopeA bind: 'foo' to: 3.	scopeA bind: 'snark' to: 'boojum'.	scopeB bind: 'baz' to: 5.	scopeB bind: 'snark' to: 'hope'.	self deny: (scopeB hasBindingFor: 'floccinaucinihilipilification').	self assert: (scopeB hasBindingFor: 'foo').	self assert: (scopeB hasBindingFor: 'baz').	self assert: (scopeB hasBindingFor: 'snark').	self assert: ((scopeB bindingFor: 'foo') = 3).	self assert: ((scopeB bindingFor: 'baz') = 5).	self assert: ((scopeB bindingFor: 'snark') = 'hope').	self assert: ((scopeA bindingFor: 'snark') = 'boojum').	scopeA rebind: 'snark' to: 'thimble'.	self assert: ((scopeB bindingFor: 'snark') = 'hope').	self assert: ((scopeB bindingFor: 'bozo') = 'clown').	self assert: ((scopeA bindingFor: 'snark') = 'thimble').	self assert: ((scopeA bindingFor: 'baz') = 9).	self assert: ((scopeA bindingFor: 'bozo') = 'clown').	self assert: ((scopeA bindingFor: 'foo') = 3).	self should: [scopeA bind: 'foo' to: 13] raise: MiniMultipleDeclarationError. ! !!MiniScopeTestCase methodsFor: 'running' stamp: 'JohnSarkela 11/4/2011 11:01'!testRebind	| globalScope scopeA |	globalScope := MiniScope globalScope.	globalScope bind: 'foo' to: 7.	scopeA := MiniScope newScopeIn: globalScope.	scopeA rebind: 'foo' to: 3.	self assert: ((globalScope bindingFor: 'foo') = 3)! !!MiniScopeTestCase methodsFor: 'running' stamp: 'jws 11/3/2016 07:48'!testVoidScopeBehavior	| aVoidScope |	aVoidScope := MiniVoidScope default.	self should: [aVoidScope outerScope: MiniScope new] raise: MiniVoidScopeError.	self should: [aVoidScope bindings: Dictionary new] raise: MiniVoidScopeError.	self should: [aVoidScope bind: 'foo' to: 7] raise: MiniVoidScopeError.	self should: [aVoidScope bindingFor: 'foo'] raise: MiniUndeclaredError.	self should: [aVoidScope rebind: 'foo' to: 9] raise: MiniVoidScopeError.	self deny: (aVoidScope hasBindingFor: 'foo').! !!MiniScopeTestCase methodsFor: 'running' stamp: 'jws 11/3/2016 07:48'!testVoidScopeSingleton	| aVoidScope |	self should: [MiniVoidScope new] raise: NotImplemented.	self should: [MiniVoidScope globalScope] raise: NotImplemented.	self should: [MiniVoidScope newScopeIn: MiniScope new] raise: NotImplemented.	aVoidScope := MiniVoidScope default.	self assert: (aVoidScope outerScope = aVoidScope).	self assert: (aVoidScope == MiniVoidScope default).! !