Halt: 18 March 2017 5:11:34.759806 pmVM: Win32 - SmalltalkImage: Squeak5.1 [latest update: #16548]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir C:\Users\jbonino\OneDrive\Documents\School\zFinished\CS322\Squeak5.1-16548-32bit-201608171728-WindowsTrusted Dir C:\Users\jbonino\OneDrive\Documents\School\zFinished\CS322\Squeak5.1-16548-32bit-201608171728-Windows\jboninoUntrusted Dir C:\Users\jbonino\OneDrive\Documents\My SqueakConsumerItemTestCase(Object)>>halt	Receiver: ConsumerItemTestCase>>#testReviewList	Arguments and temporary variables: 	Receiver's instance variables: 		testSelector: 	#testReviewList		timeout: 	nil		item: 	an ItemConsumerItemTestCase>>testReviewList	Receiver: ConsumerItemTestCase>>#testReviewList	Arguments and temporary variables: 		rev: 	a Review		rev2: 	a Review		rev3: 	a Review	Receiver's instance variables: 		testSelector: 	#testReviewList		timeout: 	nil		item: 	an ItemConsumerItemTestCase(TestCase)>>performTest	Receiver: ConsumerItemTestCase>>#testReviewList	Arguments and temporary variables: 	Receiver's instance variables: 		testSelector: 	#testReviewList		timeout: 	nil		item: 	an Item[] in [] in ConsumerItemTestCase(TestCase)>>runCase	Receiver: ConsumerItemTestCase>>#testReviewList	Arguments and temporary variables: 	Receiver's instance variables: 		testSelector: 	#testReviewList		timeout: 	nil		item: 	an ItemBlockClosure>>on:do:	Receiver: [closure] in [] in ConsumerItemTestCase(TestCase)>>runCase	Arguments and temporary variables: 		exceptionOrExceptionSet: 	an ExceptionSet		handlerAction: 	[closure] in [] in ConsumerItemTestCase(TestCase)>>timeout:after:...etc...		handlerActive: 	false	Receiver's instance variables: 		outerContext: 	[] in ConsumerItemTestCase(TestCase)>>runCase		startpc: 	62		numArgs: 	0[] in ConsumerItemTestCase(TestCase)>>timeout:after:	Receiver: ConsumerItemTestCase>>#testReviewList	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		testSelector: 	#testReviewList		timeout: 	nil		item: 	an ItemBlockClosure>>ensure:	Receiver: [closure] in ConsumerItemTestCase(TestCase)>>timeout:after:	Arguments and temporary variables: 		aBlock: 	[closure] in ConsumerItemTestCase(TestCase)>>timeout:after:		complete: 	nil		returnValue: 	nil	Receiver's instance variables: 		outerContext: 	ConsumerItemTestCase(TestCase)>>timeout:after:		startpc: 	157		numArgs: 	0ConsumerItemTestCase(TestCase)>>timeout:after:	Receiver: ConsumerItemTestCase>>#testReviewList	Arguments and temporary variables: 		aBlock: 	[closure] in [] in ConsumerItemTestCase(TestCase)>>runCase		seconds: 	5		delay: 	a Delay(5000 msecs; 4987 msecs remaining)		watchdog: 	a Process in [] in Delay>>wait		theProcess: 	#(nil)	Receiver's instance variables: 		testSelector: 	#testReviewList		timeout: 	nil		item: 	an Item[] in ConsumerItemTestCase(TestCase)>>runCase	Receiver: ConsumerItemTestCase>>#testReviewList	Arguments and temporary variables: 	Receiver's instance variables: 		testSelector: 	#testReviewList		timeout: 	nil		item: 	an ItemBlockClosure>>ensure:	Receiver: [closure] in ConsumerItemTestCase(TestCase)>>runCase	Arguments and temporary variables: 		aBlock: 	[closure] in ConsumerItemTestCase(TestCase)>>runCase		complete: 	nil		returnValue: 	nil	Receiver's instance variables: 		outerContext: 	ConsumerItemTestCase(TestCase)>>runCase		startpc: 	45		numArgs: 	0ConsumerItemTestCase(TestCase)>>runCase	Receiver: ConsumerItemTestCase>>#testReviewList	Arguments and temporary variables: 	Receiver's instance variables: 		testSelector: 	#testReviewList		timeout: 	nil		item: 	an Item[] in [] in TestResult>>runCase:	Receiver: 0 run, 0 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes	Arguments and temporary variables: <<error during printing>	Receiver's instance variables: 		timeStamp: 	18 March 2017 5:11:34 pm		failures: 	a Set()		errors: 	an OrderedCollection()		passed: 	an OrderedCollection()BlockClosure>>on:do:	Receiver: [closure] in [] in TestResult>>runCase:	Arguments and temporary variables: 		exceptionOrExceptionSet: 	TestFailure		handlerAction: 	[closure] in [] in TestResult>>runCase:		handlerActive: 	true	Receiver's instance variables: 		outerContext: 	[] in TestResult>>runCase:		startpc: 	59		numArgs: 	0[] in TestResult>>runCase:	Receiver: 0 run, 0 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes	Arguments and temporary variables: 		aTestCase: 	ConsumerItemTestCase>>#testReviewList		testCasePassed: 	#(true)	Receiver's instance variables: 		timeStamp: 	18 March 2017 5:11:34 pm		failures: 	a Set()		errors: 	an OrderedCollection()		passed: 	an OrderedCollection()BlockClosure>>on:do:	Receiver: [closure] in TestResult>>runCase:	Arguments and temporary variables: 		exceptionOrExceptionSet: 	Error		handlerAction: 	[closure] in TestResult>>runCase:		handlerActive: 	true	Receiver's instance variables: 		outerContext: 	TestResult>>runCase:		startpc: 	54		numArgs: 	0TestResult>>runCase:	Receiver: 0 run, 0 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpected passes	Arguments and temporary variables: 		aTestCase: 	ConsumerItemTestCase>>#testReviewList		testCasePassed: 	#(true)	Receiver's instance variables: 		timeStamp: 	18 March 2017 5:11:34 pm		failures: 	a Set()		errors: 	an OrderedCollection()		passed: 	an OrderedCollection()ConsumerItemTestCase(TestCase)>>run:	Receiver: ConsumerItemTestCase>>#testReviewList	Arguments and temporary variables: 		aResult: 	0 run, 0 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpect...etc...	Receiver's instance variables: 		testSelector: 	#testReviewList		timeout: 	nil		item: 	an ItemConsumerItemTestCase(TestCase)>>run	Receiver: ConsumerItemTestCase>>#testReviewList	Arguments and temporary variables: 		result: 	0 run, 0 passes, 0 expected failures, 0 failures, 0 errors, 0 unexpecte...etc...	Receiver's instance variables: 		testSelector: 	#testReviewList		timeout: 	nil		item: 	an ItemBrowser(CodeHolder)>>testRunSuite:	Receiver: a Browser	Arguments and temporary variables: 		suite: 	ConsumerItemTestCase>>#testReviewList		result: 	nil		defect: 	nil	Receiver's instance variables: 		dependents: 	a DependentsArray(a PluggableSystemWindow<System Browser: ConsumerI...etc...		contents: 	a Text for 'testReviewList		|rev rev2 rev3|	rev := Review new cate...etc...		currentCompiledMethod: 	(ConsumerItemTestCase>>#testReviewList "a CompiledMethod...etc...		contentsSymbol: 	#source		multiWindowState: 	nil		environment: 	Smalltalk		systemOrganizer: 	('Kernel-Classes' BasicClassOrganizer Behavior Categorizer Class...etc...		classOrganizer: 	('running' testReviewList)('initialize-release' setUp tearDown...etc...		metaClassOrganizer: 	('as yet unclassified')		editSelection: 	#editMessage		metaClassIndicated: 	false		selectedSystemCategory: 	#'SeniorProject-Tests'		selectedClassName: 	#ConsumerItemTestCase		selectedMessageName: 	#testReviewList		selectedMessageCategoryName: 	nil		classDefinition: 	'TestCase subclass: #ConsumerItemTestCase	instanceVariableNam...etc...		metaClassDefinition: 	'ConsumerItemTestCase class	instanceVariableNames: '''''--- The full stack ---ConsumerItemTestCase(Object)>>haltConsumerItemTestCase>>testReviewListConsumerItemTestCase(TestCase)>>performTest[] in [] in ConsumerItemTestCase(TestCase)>>runCaseBlockClosure>>on:do:[] in ConsumerItemTestCase(TestCase)>>timeout:after:BlockClosure>>ensure:ConsumerItemTestCase(TestCase)>>timeout:after:[] in ConsumerItemTestCase(TestCase)>>runCaseBlockClosure>>ensure:ConsumerItemTestCase(TestCase)>>runCase[] in [] in TestResult>>runCase:BlockClosure>>on:do:[] in TestResult>>runCase:BlockClosure>>on:do:TestResult>>runCase:ConsumerItemTestCase(TestCase)>>run:ConsumerItemTestCase(TestCase)>>runBrowser(CodeHolder)>>testRunSuite: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -Browser(CodeHolder)>>testRunTestBrowser(StringHolder)>>perform:orSendTo:[] in MenuItemMorph>>invokeWithEvent:BlockClosure>>ensure:CursorWithMask(Cursor)>>showWhile:MenuItemMorph>>invokeWithEvent:MenuItemMorph>>mouseUp:MenuItemMorph>>handleMouseUp:MouseButtonEvent>>sentTo:MenuItemMorph(Morph)>>handleEvent:MorphicEventDispatcher>>dispatchEvent:withHandler:withMorph:MorphicEventDispatcher>>dispatchDefault:with:MorphicEventDispatcher>>dispatchEvent:with:MenuItemMorph(Morph)>>processEvent:using:[] in MorphicEventDispatcher>>dispatchEvent:toSubmorphsOf:Array(SequenceableCollection)>>do:MenuMorph(Morph)>>submorphsDo:MorphicEventDispatcher>>dispatchEvent:toSubmorphsOf:MorphicEventDispatcher>>dispatchEvent:withHandler:withMorph:MorphicEventDispatcher>>dispatchDefault:with:MorphicEventDispatcher>>dispatchEvent:with:MenuMorph(Morph)>>processEvent:using:MorphicEventDispatcher>>doProcessingForFocusEvent:with:MorphicEventDispatcher>>dispatchFocusEventFully:with:MenuMorph>>processFocusEvent:using:MenuMorph(Morph)>>processFocusEvent:[] in [] in [] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:MouseButtonEvent(MorphicEvent)>>becomeActiveDuring:[] in [] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:HandMorph>>becomeActiveDuring:[] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>ensure:PasteUpMorph>>becomeActiveDuring:HandMorph>>sendFocusEvent:to:clear:HandMorph>>sendEvent:focus:clear:HandMorph>>sendMouseEvent:HandMorph>>handleEvent:HandMorph>>processEvents[] in WorldState>>doOneCycleNowFor:Array(SequenceableCollection)>>do:-- and more not shown --